alpha <- 0.05 #rate of decay#
#
W <- 1:1000#
#
p1 <- 0.4#
p2 <- 0.6#
#
dw <- 1#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1))/(dw*exp(-alpha*W)) ) )#
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1)))/1 #(dw*exp(-alpha*W)) ) )#
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1)))/1) #(dw*exp(-alpha*W)) ) )#
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.5  #encounter rate #
#
alpha <- 0.05 #rate of decay#
#
W <- 1:100#
#
p1 <- 0.4#
p2 <- 0.6#
#
dw <- 1#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1)))/1) #(dw*exp(-alpha*W)) ) )#
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
p1 <- 0#
p2 <- 1#
#
dw <- 1#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1)))/1) #(dw*exp(-alpha*W)) ) )#
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1)))/(dw*exp(-alpha*W)) ) )#
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
p1 <- 0.0000001#
p2 <- 1#
#
dw <- 1#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
W <- 5:100#
#
p1 <- 0.00001#
p2 <- 1#
#
dw <- 1#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
W <- 1:10#
#
p1 <- 0.00001#
p2 <- 1#
#
dw <- 1#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
exp(-(m1/alpha)
)
W <- 1:100#
#
p1 <- 0.2#
p2 <- 0.3#
#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
alpha <- 0.5 #rate of decay#
#
W <- 1:100#
#
p1 <- 0.2#
p2 <- 0.3#
#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
p1 <- 0.4#
p2 <- 0.6#
#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
m1 <- 0.5  #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- 1:100#
#
p1 <- 0.4#
p2 <- 0.6#
#
dw <- 1 #0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
m1 <- 0.5  #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- 1:100#
#
p1 <- 0.4#
p2 <- 0.6#
#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
dw <- 0.001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
dw <- 0.1#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
dw <- 0.01#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
Survival
##predation#
#
m1 <- 0.5  #encounter rate #
#
alpha <- 1.1 #rate of decay#
#
W <- 1:100#
#
p1 <- 0.4#
p2 <- 0.6#
#
dw <- 0.01#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.5  #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- 1:100#
#
p1 <- 0.4#
p2 <- 0.6#
#
dw <- 0.01#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.5  #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- 1:100#
#
p1 <- 0.8#
p2 <- 0.9#
#
dw <- 0.01#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.5  #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- 1:1000#
#
p1 <- 0.8#
p2 <- 0.9#
#
dw <- 0.01#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.5  #encounter rate #
#
alpha <- 0.01 #rate of decay#
#
W <- 1:1000#
#
p1 <- 0.8#
p2 <- 0.9#
#
dw <- 0.01#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.5  #encounter rate #
#
alpha <- 0.02 #rate of decay#
#
W <- 1:1000#
#
p1 <- 0.8#
p2 <- 0.9#
#
dw <- 0.01#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.5  #encounter rate #
#
alpha <- 0.1 #rate of decay#
#
W <- 1:1000#
#
p1 <- 0.8#
p2 <- 0.9#
#
dw <- 0.01#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.5  #encounter rate #
#
alpha <- 1.1 #rate of decay#
#
W <- 1:1000#
#
p1 <- 0.8#
p2 <- 0.9#
#
dw <- 0.01#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 10 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- 1:1000#
#
p1 <- 0.8#
p2 <- 0.9#
#
dw <- 0.01#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.1 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- 1:1000#
#
p1 <- 0.8#
p2 <- 0.9#
#
dw <- 0.01#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.5 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- 1:1000#
#
p1 <- 0.8#
p2 <- 0.9#
#
dw <- 0.01#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.005 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- 1:1000#
#
p1 <- 0.8#
p2 <- 0.9#
#
dw <- 0.01#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.005 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- 1:1000#
#
p1 <- 0.8#
p2 <- 0.9#
#
dw <- 0.000001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.005 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- 1:1000#
#
p1 <- 0.8#
p2 <- 0.9#
#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.005 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- 1:1000#
#
p1 <- 0.8#
p2 <- 0.9#
#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
Survival
##predation#
#
m1 <- 0.005 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- 1:1000#
#
p1 <- 0.2#
p2 <- 0.9#
#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.05 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- 1:1000#
#
p1 <- 0.2#
p2 <- 0.9#
#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.05 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- 1:10#
#
p1 <- 0.2#
p2 <- 0.9#
#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.05 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- seq(1, 10, by=0.01)#
#
p1 <- 0.2#
p2 <- 0.9#
#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.1 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- seq(1, 10, by=0.01)#
#
p1 <- 0.2#
p2 <- 0.9#
#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.1 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- seq(1, 10, by=0.01)#
#
p1 <- 0#
p2 <- 0.9#
#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.1 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- seq(1, 10, by=0.01)#
#
p1 <- 0#
p2 <- 0.75#
#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.1 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0#
p2 <- 0.75#
#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.2 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0#
p2 <- 0.75#
#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
##predation#
#
m1 <- 0.2 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0.1#
p2 <- 1#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available, mortality is constant. if 0-p2 is available, we see asymptotic mortality. if p1 and p1 >0, there is a refuge bottleneck if preferences don't go down to zero that comes because very tiny fish are less available than small fish.
##predation#
#
m1 <- 0.02 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0.1#
p2 <- 1#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available, mortality is constant. if 0-p2 is available, we see asymptotic mortality. if p1 and p1 >0, there is a refuge bottleneck if preferences don't go down to zero that comes because very tiny fish are less available than small fish.
##predation#
#
m1 <- 0.02 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0.5#
p2 <- 1#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available, mortality is constant. if 0-p2 is available, we see asymptotic mortality. if p1 and p1 >0, there is a refuge bottleneck if preferences don't go down to zero that comes because very tiny fish are less available than small fish.
##predation#
#
m1 <- 0.02 #encounter rate #
#
alpha <- 0.5 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0.5#
p2 <- 1.1#
dw <- 0.0001#
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available, mortality is constant. if 0-p2 is available, we see asymptotic mortality. if p1 and p1 >0, there is a refuge bottleneck if preferences don't go down to zero that comes because very tiny fish are less available than small fish.
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) )) #
#
k=1.3e-23#
E = 1.04e-19#
theta=0.66#
Temp = 293:297  #
#
 Wmax <- 1000#
     C_w <- matrix(nrow=length(Temp), ncol=Wmax, data=0 )#
	 Inet<- matrix(nrow=length(Temp), ncol=Wmax, data=0 )#
#
  for (w in 1:Wmax) {#
	for(tau in 1:length(Temp)) {#
		        C_w[temp, w] <-  exp(c0 + theta*log(w) -E/(k*Temp[tau]))   #
    				Inet[temp, w] <-  Prey[w] - C_w[temp, w] #
    }#
  }#
   plot(Prey, type="l", xlab <- "Mass", ylab <- "Income from Prey")  #
  matplot(t(Inet), type = "l", lty=1, lwd=2, ylim=c(0, 5), xlab="Mass (kg)", ylab="Net income", col=c(4, 3, "orange", 2))
k=1.3e-23#
E = 1.04e-19#
theta=0.66#
Temp = 293:297  #
c0 <- 1e+5#
 Wmax <- 1000#
     C_w <- matrix(nrow=length(Temp), ncol=Wmax, data=0 )#
	 Inet<- matrix(nrow=length(Temp), ncol=Wmax, data=0 )#
#
  for (w in 1:Wmax) {#
	for(tau in 1:length(Temp)) {#
		        C_w[temp, w] <-  exp(c0 + theta*log(w) -E/(k*Temp[tau]))   #
    				Inet[temp, w] <-  Prey[w] - C_w[temp, w] #
    }#
  }#
   plot(Prey, type="l", xlab <- "Mass", ylab <- "Income from Prey")  #
  matplot(t(Inet), type = "l", lty=1, lwd=2, ylim=c(0, 5), xlab="Mass (kg)", ylab="Net income", col=c(4, 3, "orange", 2))
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) )) #
#
k=1.3e-23#
E = 1.04e-19#
theta=0.66#
Temp = 293:297  #
c0 <- 1e+5#
 Wmax <- 1000#
     C_w <- matrix(nrow=length(Temp), ncol=Wmax, data=0 )#
	 Inet<- matrix(nrow=length(Temp), ncol=Wmax, data=0 )#
#
  for (w in 1:Wmax) {#
	for(tau in 1:length(Temp)) {#
		        C_w[temp, w] <-  exp(c0 + theta*log(w) -E/(k*Temp[tau]))   #
    				Inet[temp, w] <-  Prey[w] - C_w[temp, w] #
    }#
  }#
   plot(Prey, type="l", xlab <- "Mass", ylab <- "Income from Prey")  #
  matplot(t(Inet), type = "l", lty=1, lwd=2, ylim=c(0, 5), xlab="Mass (kg)", ylab="Net income", col=c(4, 3, "orange", 2))
Prey
dim(prey)
dim(Prey)
W<- 1:1000#
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) )) #
#
k=1.3e-23#
E = 1.04e-19#
theta=0.66#
Temp = 293:297  #
c0 <- 1e+5#
 Wmax <- 1000#
     C_w <- matrix(nrow=length(Temp), ncol=Wmax, data=0 )#
	 Inet<- matrix(nrow=length(Temp), ncol=Wmax, data=0 )#
#
  for (w in 1:Wmax) {#
	for(tau in 1:length(Temp)) {#
		        C_w[temp, w] <-  exp(c0 + theta*log(w) -E/(k*Temp[tau]))   #
    				Inet[temp, w] <-  Prey[w] - C_w[temp, w] #
    }#
  }#
   plot(Prey, type="l", xlab <- "Mass", ylab <- "Income from Prey")  #
  matplot(t(Inet), type = "l", lty=1, lwd=2, ylim=c(0, 5), xlab="Mass (kg)", ylab="Net income", col=c(4, 3, "ora
)
W<- 1:1000#
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) )) #
#
k=1.3e-23#
E = 1.04e-19#
theta=0.66#
Temp = 293:297  #
c0 <- 1e+5#
 Wmax <- 1000#
     C_w <- matrix(nrow=length(Temp), ncol=Wmax, data=0 )#
	 Inet<- matrix(nrow=length(Temp), ncol=Wmax, data=0 )
Prey
##predation#
#
m1 <- 0.02 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.5 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0.5#
p2 <- 1.1#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
#
W<- 1:1000#
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) ))
Prey
##predation#
#
m1 <- 0.02 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.5 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0.5#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
#
W<- 1:1000#
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) ))
Prey
W<- 1:100#
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) ))
Plot(Prey)
plot(Prey)
plot(Prey, type="l")
m1 <- 0.02 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.5 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0.5#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottlen
##predation#
#
m1 <- 0.002 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.6 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0.5#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
W<- 1:100#
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) ))
plot(Prey)
W<- 1:100#
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) ))
plot(Prey)
W<- 1:1000#
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) ))
plot(Prey)
W<- 1:1000#
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey)
m1 <- 0.02 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.6 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0.5#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
#
W<- 1:1000#
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey)
W<- 1:100#
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey)
p1 <- 0#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
#
W<- 1:100#
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey)
p1 <- 0#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
#
W<- 1:100#
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass")
plot(Prey, xlab="Mass", type="")
plot(Prey, xlab="Mass", type="l")
p1 <- 0#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
#
W<- 1:100#
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.2 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.6 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
#
W<- 1:100#
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.5 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.6 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
#
W<- 1:100#
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
alpha <- 0.7 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
#
W<- 1:100#
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.75 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.7 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.2 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.7 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.1 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.7 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
m1 <- 0.1 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.5#rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0.01#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
p1 <- 0.0#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
p1 <- 0.001#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.1 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.5#rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0.001#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.01 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.5#rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0.001#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.01 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.5 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0.1#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.01 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.5 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
p1 <- 0.01#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.001 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.5 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0.1#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.1 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.5 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0.1#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
alpha <- 0.9 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0.1#
p2 <- 0.7#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.1 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.9 #rate of decay#
#
W <- seq(1, 1000, by=0.5)#
#
p1 <- 1#
p2 <- 0 #
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
p1 <- 0#
p2 <- 1 #
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
p1 <- 0.001#
p2 <- 0.9 #
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
W <- seq(1, 1000, by=0.5)#
#
p1 <- 0.001#
p2 <- 0.7 #
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
W <- seq(1, 1000, by=1)#
#
p1 <- 0.001#
p2 <- 0.7 #
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
p1 <- 0.001#
p2 <- 0.2 #
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
p1 <- 0.0001#
p2 <- 0.1 #
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
alpha <- 0.2 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.0001#
p2 <- 0.1 #
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.2 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.2 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.0001#
p2 <- 0.1 #
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
alpha <- 0.02 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.0001#
p2 <- 0.1 #
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.3 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.02 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.0001#
p2 <- 0.1 #
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.1 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.01 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.0001#
p2 <- 0.1 #
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.01 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.01 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.0001#
p2 <- 0.1 #
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
alpha <- 0.02 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.0001#
p2 <- 0.1 #
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
dw=0.01#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(dw*exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(1=exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
1 <- 0.0001#
p2 <- 0.1 #
 dw=0.01#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(1+exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
W <- seq(1, 1000, by=1)#
#
p1 <- 0.0001#
p2 <- 0.1 #
 dw=0.01#
 Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(1+exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#spec
Survival <- exp(-0.2-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(1+exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")
(exp(-alpha*W/p2) - exp(-alpha*W/p1) )
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
Survival <- exp(-(m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) ) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) ))
plot(Prey, xlab="Mass", type="l")
k=1.3e-23#
E = 1.04e-19#
theta=0.66#
Temp = 293:297  #
c0 <- 1e+5#
 Wmax <- 1000#
     C_w <- matrix(nrow=length(Temp), ncol=Wmax, data=0 )#
	 Inet<- matrix(nrow=length(Temp), ncol=Wmax, data=0 )#
#
  for (w in 1:Wmax) {#
	for(tau in 1:length(Temp)) {#
		        C_w[temp, w] <-  exp(c0 + theta*log(w) -E/(k*Temp[tau]))   #
    				Inet[temp, w] <-  Prey[w] - C_w[temp, w] #
    }#
  }
C_w-Inet
exp(c0 + theta*log(w) -E/(k*Temp[tau]))
c0
theta*log(10)
theta*log(1000)
-E/(k*Temp[tau]
)
c0 <- 1 #
 Wmax <- 1000#
     C_w <- matrix(nrow=length(Temp), ncol=Wmax, data=0 )#
	 Inet<- matrix(nrow=length(Temp), ncol=Wmax, data=0 )#
#
  for (w in 1:Wmax) {#
	for(tau in 1:length(Temp)) {#
		        C_w[temp, w] <-  exp(c0 + theta*log(w) -E/(k*Temp[tau]))   #
    				Inet[temp, w] <-  Prey[w] - C_w[temp, w] #
    }#
  }#
   plot(Prey, type="l", xlab <- "Mass", ylab <- "Income from Prey")  #
  matplot(t(Inet), type = "l", lty=1, lwd=2, ylim=c(0, 5), xlab="Mass (kg)", ylab="Net income", col=c(4, 3, "orange", 2))
Inet
Survival <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.00001 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.02 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.0001#
p2 <- 0.1 #
 Survival <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
alpha <- 0.02 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.0001#
p2 <- 0.5 #
 Survival <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.00001 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.2 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.0001#
p2 <- 0.5 #
 Survival <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.001 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.2 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.0001#
p2 <- 0.5 #
 Survival <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.001 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.2 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.0001#
p2 <- 0.5 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(Survival, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
##predation#
#
m1 <- 0.001 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 0.2 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.0001#
p2 <- 0.5 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.001 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 10 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.0001#
p2 <- 0.5 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.001 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 1#rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.0001#
p2 <- 0.5 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.1 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 1#rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.0001#
p2 <- 0.5 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish.
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.01 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 1#rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.001#
p2 <- 0.5 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.0001 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- 1#rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.001#
p2 <- 0.5 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.0001 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- .2 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.001#
p2 <- 0.5 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
##predation#
#
m1 <- 0.0001 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- .2 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.001#
p2 <- 0.5 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
##predation#
#
m1 <- 0.0001 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- .2 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.001#
p2 <- 0.5 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (1+exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
##predation#
#
m1 <- 0.0001 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- .2 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.001#
p2 <- 0.5 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.0001 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- .2 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.1#
p2 <- 0.2 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. Amazingly, there is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.01 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- .2 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.1#
p2 <- 0.2 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. There is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.01 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- .2 #rate of decay#
#
W <- seq(1, 1000, by=1)#
#
p1 <- 0.1#
p2 <- 0.6 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. There is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
alpha <- .2 #rate of decay#
#
W <- seq(1, 100, by=1)#
#
p1 <- 0.1#
p2 <- 0.6 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. There is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
p1 <- 0.2#
p2 <- 0.6 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. There is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
p1 <- 0#
p2 <- 0.6 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. There is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
alpha <- .2 #rate of decay#
#
W <- seq(2, 100, by=1)#
#
p1 <- 0#
p2 <- 0.6 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. There is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
alpha <- 1 #rate of decay#
#
W <- seq(2, 100, by=1)#
#
p1 <- 0#
p2 <- 0.6 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. There is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
alpha <- .1 #rate of decay#
#
W <- seq(2, 100, by=1)#
#
p1 <- 0#
p2 <- 0.6 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. There is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
m1 <- 0.01 #encounter rate , includes unit conversion from length to mass that comes from accounting for density dependence in the denominator#
#
alpha <- .1 #rate of decay#
#
W <- seq(2, 100, by=1)#
#
p1 <- 0#
p2 <- 0.6 #
 Mortality <- (m1/alpha)*( (exp(-alpha*W/p2) - exp(-alpha*W/p1) ) )/(exp(-alpha*W)) #
quartz()#
par(mfrow=c(2,2))#
plot(1-Mortality, type="l", xlab= "Mass", ylab = "Survival")#
#
#special cases of the model: ALL prey are available (p1=0, p2=1), mortality is constant. if 0--p2 <1 is available, we see asymptotic mortality. There is a refuge bottleneck if preference window doesn't go down to zero (0 < p1 <p2 <1) that comes because very tiny fish are less available than small fish. #
Prey <- (m1/alpha^2)*((exp(-alpha*p1*W)*(1+alpha*p1*W) - exp(-alpha*p2*W)*(1+alpha*p2*W) ) / (exp(-alpha*W) )) #
plot(Prey, xlab="Mass", type="l")
lion <- read.csv(url("http://www.zoology.ubc.ca/~schluter/WhitlockSchluter/wp-content/data/chapter17/chap17e1LionNoses.csv"))#
head(lion)
str(lion)
lion
lion <- read.csv(url("http://www.zoology.ubc.ca/~schluter/WhitlockSchluter/wp-content/data/chapter17/chap17e1LionNoses.csv"))#
head(lion)#
#
lion #take a look at the dataframe. Notice no spaces or special #
#characters in column headings. This is important if using older versions of R#
names(lion)#
#
par(mfrow=c(1,2))#
hist(lion[,1])#
hist(lion[,2])#
#
plot(ageInYears ~ proportionBlack, data = lion) #basic scatterplot#
#
plot(ageInYears ~ proportionBlack, data = lion, pch = 16, col="firebrick", #
     las = 1, cex = 2, bty = "l", xlim = c(0,0.8), ylim = c(0,14), #
     ylab = "Age (years)", xlab = "Proportion black")  #fancy plot#
#
#to unpack what each of the plot options are, use the command line help:#
?plot#
#From there you can click on par, which has the details of all the baseR graphical paramters. #
par(mfrow=c(1,2)) #this is a magic R command that lets one divide up the plot window into N rows and M columns#
#(here, N and M are both 2 but could be anything) #
#
#try again with both plots side by side:#
#
plot(ageInYears ~ proportionBlack, data = lion) #basic scatterplot#
#
plot(ageInYears ~ proportionBlack, data = lion, pch = 16, col="firebrick", #
     las = 1, cex = 1.5, bty = "l", xlim = c(0,0.8), ylim = c(0,14), #
     ylab = "Age (years)", xlab = "Proportion black")  #fancy plot#
#
#Now let's do some stats:#
#
lionRegression <- lm(ageInYears ~ proportionBlack, data = lion) #name an object that will hold regression coefficients#
#take a look at it:#
lionRegression#
#
#you can extract the coefs from this object which can be useful when trying to manually manipulate plots#
lionSlope <- coef(lionRegression)[2]#
summary(lionRegression) #old fashioned tests of significance - this is a one sample t-test asking #
#whether the slope is different than the the null Y = 0 (a flat line). #
#It also includes standard error estimates on each coefficient#
#
abline(lionRegression) #quick method to put a straight line on a plot#
#
#######fancier method #
#
par(mfrow=c(1,2))#
#
plot(ageInYears ~ proportionBlack, data = lion, pch = 16, col="firebrick", #
     las = 1, cex = 1.5, bty = "l", xlim = c(0,0.8), ylim = c(0,14), #
     ylab = "Age (years)", xlab = "Proportion black")  #fancy plot#
#
xpts <- range(lion$proportionBlack)#
ypts <- predict(lionRegression, data.frame(proportionBlack = xpts))#
lines(ypts ~ xpts, lwd = 1.5)#
#####Now we're going to plot confidence bands on our regression#
#
xpt <- seq(min(lion$proportionBlack), max(lion$proportionBlack), #
           length.out = 100)#
ypt <- data.frame( predict(lionRegression, #
                           newdata = data.frame(proportionBlack = xpt), #
                           interval = "confidence") )#
lines(ypt$lwr ~ xpt, lwd = 1.5, lty = 2)#
lines(ypt$upr ~ xpt, lwd = 1.5, lty = 2)#
#
#####Compared with a plot of prediction intervals: #
plot(ageInYears ~ proportionBlack, data = lion, pch = 16, col="firebrick", #
     las = 1, cex = 1.5, bty = "l", xlim = c(0,0.8), ylim = c(0,14), #
     ylab = "Age (years)", xlab = "Proportion black")  #fancy plot#
#
xpts <- range(lion$proportionBlack)#
ypts <- predict(lionRegression, data.frame(proportionBlack = xpts))#
lines(ypts ~ xpts, lwd = 1.5)#
#
xpt <- seq(min(lion$proportionBlack), max(lion$proportionBlack), #
           length.out = 100)#
ypt <- data.frame(predict(lionRegression, newdata = data.frame(proportionBlack = xpt), #
                          interval = "prediction", level = 0.95))#
lines(ypt$lwr ~ xpt, lwd = 1.5, lty = 3)#
lines(ypt$upr ~ xpt, lwd = 1.5, lty = 3)
library(ggplot2)#
library(reshape2)#
  #rm(list=ls(all=TRUE))#
#
 mu_f = matrix(nrow=10, ncol=3, data=rep(seq(0, 0.9, by=0.1), 3)) #make a vector of fishing mortality from 0 to 0.9 for each life-history type#
 # mu_f = matrix(nrow=10, ncol=3, data=0.3)#
slot = "YES" #
#
 source('~/Dropbox/Manuscripts in Progress/Wrasse dimorphism model/wrasse parameters.R', chdir = TRUE)#
 # source('~/Dropbox/Manuscripts in Progress/Wrasse dimorphism model/lingcod parameters.R', chdir = TRUE)#
 #source('~/Dropbox/Manuscripts in Progress/Wrasse dimorphism model/bluegill parameters.R', chdir = TRUE)#
#
##################################################################################################################
#For every level of fishing pressure (0-0.9): #
###Simulate population dynamics, start from an arbitrary population size and let the population reach a stable age distribution, then start fishing. The population will reach a new, fished, steady state (stable age dist). *Note:  recruitment is based only on Female abundance, and assuming 50:50 offspring sex ratio.#
 SPR=rep(0, length(mu_f[,1]))#
Yield = rep(0, length(mu_f[,1]))#
Maleratio = rep(0, length(mu_f[,1]))#
OSR = rep(0, length(mu_f[,1]))#
 SNdepletion = rep(0, length(mu_f[,1]))#
  NMdepletion = rep(0, length(mu_f[,1]))#
  Femaledep =   rep(0, length(mu_f[,1]))#
  for (fish in 1:length(mu_f[,1])) {#
  	osr <- rep(1, Tmax -1)#
for(t in 1:(Tmax-1)) {#
	if (t < Tfishing) {#
      E[t]=sum(N[, t,1]*pmat[,t,1]*eggs, na.rm=TRUE) #assuming spawning occurs between 1 t and the next and depends ONLY on mature females#
      P[t] = E[t]#
      } else {#
      	#for lingcod#
       osr[t]=   abs(sum(N[, t,2]*pmat[,Tfishing - 1 ,2]*L[-Amax[2], 2]) / sum(N[, Tfishing - 1,1]*pmat[,Tfishing - 1,1]*L[-Amax[1], 1])  - sum(N[, t,2]*pmat[,t ,2]*L[-Amax[2], 2]) / sum(N[, t,1]*pmat[,t,1]*L[-Amax[1], 1]) ) / sum(N[, t,2]*pmat[,t ,2]*L[-Amax[2], 2] ) / sum(N[, t,1]*pmat[,t,1]*L[-Amax[1], 1]) )#
     #for wrasse and bluegill  	#
      osr[t]=   abs(sum(N[, t,2]*pmat[,Tfishing - 1 ,2]*L[-Amax[2], 2],  N[, Tfishing - 1,3]*pmat[,Tfishing - 1,3]*L[-Amax[3], 3] ) / sum(N[, Tfishing - 1,1]*pmat[,Tfishing - 1,1]*L[-Amax[1], 1])  - sum(N[, t,2]*pmat[,t ,2]*L[-Amax[2], 2],  N[, t,3]*pmat[,t,3]*L[-Amax[3], 3] ) / sum(N[, t,1]*pmat[,t,1]*L[-Amax[1], 1]) ) / sum(N[, t,2]*pmat[,t ,2]*L[-Amax[2], 2],  N[, t,3]*pmat[,t,3]*L[-Amax[3], 3] ) / sum(N[, t,1]*pmat[,t,1]*L[-Amax[1], 1]) )#
#
      print(osr[t]) #this is the delta OSR relative to the unfished OSR#
       P[t]= E[t]*osr[t]  #assumes all eggs are fertilized (for now)#
  for(g in 1:Ngroup) {#
 N[1,t+1,g]= alpha*P[t]/(1+beta*P[t])*prop[g] #this is the N_0 class that is born and recruits to the population model in the next time step... #
         # calculate  probability of fishing mortality#
    age <- 1#
    for (age in 1:(Amax[g]-1)) {  #
      if (Tfishing < t) {#
        Fishing[age,g] = select[age,g]*mu_f[fish, g]#
        Fishing[Amax[g], g] = select[Amax[g], g]*mu_f[fish, g] #
      } else {#
        Fishing[age,g] = 0#
      } #end if#
      Catch[,t+1,g] <- N[,t,g]*(1-exp(-Fishing[,g]))  #Note this is catch numbers, not biomass, assumes natural mortality occurs later in the year than fishing#
      N[age+1,t+1,g] <- N[age,t,g]*exp(-natmort[g]-Fishing[age,g]) #surviving fish in each group enter the next age class in the following year, all fish get to spawn before mortality 		 #
    } #end second age loop#
  } #next group#
} #end t loop#
SPR[fish] = E[Tfishing+10]/E[Tfishing-1]#
Yield[fish] = sum(N[,Tfishing+10,]*(1-exp(-Fishing[,])))#
  Maleratio[fish] = sum(N[, Tfishing+10, 2] *pmat[, Tfishing+10,2])/sum(N[, Tfishing+10, 3]*pmat[, Tfishing+10,3], na.rm=TRUE)#
#
 OSR[fish] = sum(N[, Tfishing+10, 1] *pmat[, Tfishing+10,2])/sum(N[-1, Tfishing+10, 2])  #
#
  SNdepletion[fish] = sum(N[, Tfishing+10, 3]) #sum(N[, Tfishing+10, 3]*pmat[, Tfishing+10, 3], na.rm=TRUE) #
  NMdepletion[fish] = sum(N[, Tfishing+10, 2]) #sum(N[, Tfishing+10, 2]*pmat[, Tfishing+10, 2],na.rm=TRUE) #
 Femaledep[fish] = sum(N[, Tfishing+10, 1]) #
} #end fish loop#
##Plot these relationships#
 # quartz()#
 # par(mfrow=c(2,2)  )#
 # #Age-length#
# ### matplot(L[-(Amax+1), ], type="l", lwd=2, las=1, ylab ="Length", xlab = "Age", col=c('black','blue', 'red'), lty=1, #
       # # ylim=c(min(L[,3]), max(L[,2])), xlim=c(0, Amax[3]))#
       # matplot(L[-(Amax+1), ], type="l", lwd=2, las=1, ylab ="Length", xlab = "Age", col=c('black','blue', 'red'), lty=1, #
       # ylim=c(min(L[,2]), max(L[,2])), xlim=c(0, Amax[2]))#
  # ###for wrasse  & bluegill#
 # legend('bottomright', legend=c('Female','Territorial Male', 'Sneaker Male'),  lty=1, col=c('black','blue', 'red'), cex=0.65)#
#
 # ###for lingcod#
 # #legend('bottomright', legend=c('Female','Territorial Male'),  lty=1, col=c('black','blue'), cex=0.65)#
# #Maturation ogives#
 # matplot(pmat[,10,], type="l", lwd=2, las=1, lty=1, col=c('black','blue', 'red'),  ylab ="Probability Mature", xlab = "Age",#
      # ylim=c(0, 1), xlim=c(0, max(Amax)))#
# plot(eggs, type="l", lwd=2, lty=1, col='black', las=1, ylab="", xlab="Age")  #
# matplot((select), type="l", lwd=2, lty=3, col=c('black','blue', "red"),las=1, ylab ="Selectivity", xlab ="Age",  ylim=c(0,1), xlim=c(0,  max(Amax)))#
 # quartz()#
# plot(colSums(N[,-1,1]), type="l", lwd=3,   ylab="Abundance", xlab="Time", col='black',#
     # ylim=c(0, max(colSums(N[,,1], na.rm=TRUE))))#
	# lines(colSums(N[,-1,2]), lwd=3, col='blue')#
	  # lines(colSums(N[,-1,3]), lwd=3, col='red')#
  # legend('bottomright', legend=c('Female','Territorial Male', 'Sneaker Male'),  lty=1, lwd=2, col=c('black','blue', 'red'), cex=1, 		bty='n')#
 	###for lingcod#
 #legend('bottomright', legend=c('Female','Territorial Male'),  lty=1, col=c('black','blue'), cex=0.65)#
#
  AgeMat<- rbind(N[,Tfishing-1 , 1]*pmat[,Tfishing-1, 1], N[,Tfishing-1, 2]*pmat[,Tfishing-1, 2], N[,Tfishing-1, 3]*pmat[,Tfishing-1, 3]) #
   males<-colSums(AgeMat[2:3, ], na.rm=TRUE) #get numbers of mature males by age#
   females<-AgeMat[1, ]  #get numbers of females by age#
    dat=cbind(females, males)#
    dat2<-melt(dat, varnames=c("Age", "Sex"))#
  FAgeMat<- rbind(N[,Tmax-1 , 1]*pmat[,Tmax-1, 1], N[,Tmax-1, 2]*pmat[,Tmax-1, 2], N[,Tmax-1, 3]*pmat[,Tmax-1, 3]) #
   Fmales<-colSums(FAgeMat[2:3, ], na.rm=TRUE) #get numbers of males by age#
   Ffemales<-FAgeMat[1, ]  #get numbers of females by age#
    fdat=cbind(Ffemales, Fmales)
library(ggplot2)#
library(reshape2)#
  #rm(list=ls(all=TRUE))#
#
 mu_f = matrix(nrow=10, ncol=3, data=rep(seq(0, 0.9, by=0.1), 3)) #make a vector of fishing mortality from 0 to 0.9 for each life-history type#
 # mu_f = matrix(nrow=10, ncol=3, data=0.3)#
slot = "YES" #
#
 source('~/Dropbox/Manuscripts in Progress/Wrasse dimorphism model/wrasse parameters.R', chdir = TRUE)#
 # source('~/Dropbox/Manuscripts in Progress/Wrasse dimorphism model/lingcod parameters.R', chdir = TRUE)#
 #source('~/Dropbox/Manuscripts in Progress/Wrasse dimorphism model/bluegill parameters.R', chdir = TRUE)#
#
##################################################################################################################
#For every level of fishing pressure (0-0.9): #
###Simulate population dynamics, start from an arbitrary population size and let the population reach a stable age distribution, then start fishing. The population will reach a new, fished, steady state (stable age dist). *Note:  recruitment is based only on Female abundance, and assuming 50:50 offspring sex ratio.#
 SPR=rep(0, length(mu_f[,1]))#
Yield = rep(0, length(mu_f[,1]))#
Maleratio = rep(0, length(mu_f[,1]))#
OSR = rep(0, length(mu_f[,1]))#
 SNdepletion = rep(0, length(mu_f[,1]))#
  NMdepletion = rep(0, length(mu_f[,1]))#
  Femaledep =   rep(0, length(mu_f[,1]))#
  for (fish in 1:length(mu_f[,1])) {#
  	osr <- rep(1, Tmax -1)#
for(t in 1:(Tmax-1)) {#
	if (t < Tfishing) {#
      E[t]=sum(N[, t,1]*pmat[,t,1]*eggs, na.rm=TRUE) #assuming spawning occurs between 1 t and the next and depends ONLY on mature females#
      P[t] = E[t]#
      } else {#
      	#for lingcod#
       osr[t]=   abs(sum(N[, t,2]*pmat[,Tfishing - 1 ,2]*L[-Amax[2], 2]) / sum(N[, Tfishing - 1,1]*pmat[,Tfishing - 1,1]*L[-Amax[1], 1])  - sum(N[, t,2]*pmat[,t ,2]*L[-Amax[2], 2]) / sum(N[, t,1]*pmat[,t,1]*L[-Amax[1], 1]) ) / sum(N[, t,2]*pmat[,t ,2]*L[-Amax[2], 2] ) / sum(N[, t,1]*pmat[,t,1]*L[-Amax[1], 1]) )#
     #for wrasse and bluegill  	#
      osr[t]=   abs(sum(N[, t,2]*pmat[,Tfishing - 1 ,2]*L[-Amax[2], 2],  N[, Tfishing - 1,3]*pmat[,Tfishing - 1,3]*L[-Amax[3], 3] ) / sum(N[, Tfishing - 1,1]*pmat[,Tfishing - 1,1]*L[-Amax[1], 1])  - sum(N[, t,2]*pmat[,t ,2]*L[-Amax[2], 2],  N[, t,3]*pmat[,t,3]*L[-Amax[3], 3] ) / sum(N[, t,1]*pmat[,t,1]*L[-Amax[1], 1]) ) / sum(N[, t,2]*pmat[,t ,2]*L[-Amax[2], 2],  N[, t,3]*pmat[,t,3]*L[-Amax[3], 3] ) / sum(N[, t,1]*pmat[,t,1]*L[-Amax[1], 1]) )#
#
      print(osr[t]) #this is the delta OSR relative to the unfished OSR#
       P[t]= E[t]*osr[t]  #assumes all eggs are fertilized (for now)#
  for(g in 1:Ngroup) {#
 N[1,t+1,g]= alpha*P[t]/(1+beta*P[t])*prop[g] #this is the N_0 class that is born and recruits to the population model in the next time step... #
         # calculate  probability of fishing mortality#
    age <- 1#
    for (age in 1:(Amax[g]-1)) {  #
      if (Tfishing < t) {#
        Fishing[age,g] = select[age,g]*mu_f[fish, g]#
        Fishing[Amax[g], g] = select[Amax[g], g]*mu_f[fish, g] #
      } else {#
        Fishing[age,g] = 0#
      } #end if#
      Catch[,t+1,g] <- N[,t,g]*(1-exp(-Fishing[,g]))  #Note this is catch numbers, not biomass, assumes natural mortality occurs later in the year than fishing#
      N[age+1,t+1,g] <- N[age,t,g]*exp(-natmort[g]-Fishing[age,g]) #surviving fish in each group enter the next age class in the following year, all fish get to spawn before mortality 		 #
    } #end second age loop#
  } #next group#
} #end t loop#
SPR[fish] = E[Tfishing+10]/E[Tfishing-1]#
Yield[fish] = sum(N[,Tfishing+10,]*(1-exp(-Fishing[,])))#
  Maleratio[fish] = sum(N[, Tfishing+10, 2] *pmat[, Tfishing+10,2])/sum(N[, Tfishing+10, 3]*pmat[, Tfishing+10,3], na.rm=TRUE)#
#
 OSR[fish] = sum(N[, Tfishing+10, 1] *pmat[, Tfishing+10,2])/sum(N[-1, Tfishing+10, 2])  #
#
  SNdepletion[fish] = sum(N[, Tfishing+10, 3]) #sum(N[, Tfishing+10, 3]*pmat[, Tfishing+10, 3], na.rm=TRUE) #
  NMdepletion[fish] = sum(N[, Tfishing+10, 2]) #sum(N[, Tfishing+10, 2]*pmat[, Tfishing+10, 2],na.rm=TRUE) #
 Femaledep[fish] = sum(N[, Tfishing+10, 1]) #
} #end fish loop#
##Plot these relationships#
 # quartz()#
 # par(mfrow=c(2,2)  )#
 # #Age-length#
# ### matplot(L[-(Amax+1), ], type="l", lwd=2, las=1, ylab ="Length", xlab = "Age", col=c('black','blue', 'red'), lty=1, #
       # # ylim=c(min(L[,3]), max(L[,2])), xlim=c(0, Amax[3]))#
       # matplot(L[-(Amax+1), ], type="l", lwd=2, las=1, ylab ="Length", xlab = "Age", col=c('black','blue', 'red'), lty=1, #
       # ylim=c(min(L[,2]), max(L[,2])), xlim=c(0, Amax[2]))#
  # ###for wrasse  & bluegill#
 # legend('bottomright', legend=c('Female','Territorial Male', 'Sneaker Male'),  lty=1, col=c('black','blue', 'red'), cex=0.65)#
#
 # ###for lingcod#
 # #legend('bottomright', legend=c('Female','Territorial Male'),  lty=1, col=c('black','blue'), cex=0.65)#
# #Maturation ogives#
 # matplot(pmat[,10,], type="l", lwd=2, las=1, lty=1, col=c('black','blue', 'red'),  ylab ="Probability Mature", xlab = "Age",#
      # ylim=c(0, 1), xlim=c(0, max(Amax)))#
# plot(eggs, type="l", lwd=2, lty=1, col='black', las=1, ylab="", xlab="Age")  #
# matplot((select), type="l", lwd=2, lty=3, col=c('black','blue', "red"),las=1, ylab ="Selectivity", xlab ="Age",  ylim=c(0,1), xlim=c(0,  max(Amax)))#
 # quartz()#
# plot(colSums(N[,-1,1]), type="l", lwd=3,   ylab="Abundance", xlab="Time", col='black',#
     # ylim=c(0, max(colSums(N[,,1], na.rm=TRUE))))#
	# lines(colSums(N[,-1,2]), lwd=3, col='blue')#
	  # lines(colSums(N[,-1,3]), lwd=3, col='red')#
  # legend('bottomright', legend=c('Female','Territorial Male', 'Sneaker Male'),  lty=1, lwd=2, col=c('black','blue', 'red'), cex=1, 		bty='n')#
 	###for lingcod#
 #legend('bottomright', legend=c('Female','Territorial Male'),  lty=1, col=c('black','blue'), cex=0.65)#
#
  AgeMat<- rbind(N[,Tfishing-1 , 1]*pmat[,Tfishing-1, 1], N[,Tfishing-1, 2]*pmat[,Tfishing-1, 2], N[,Tfishing-1, 3]*pmat[,Tfishing-1, 3]) #
   males<-colSums(AgeMat[2:3, ], na.rm=TRUE) #get numbers of mature males by age#
   females<-AgeMat[1, ]  #get numbers of females by age#
    dat=cbind(females, males)#
    dat2<-melt(dat, varnames=c("Age", "Sex"))#
  FAgeMat<- rbind(N[,Tmax-1 , 1]*pmat[,Tmax-1, 1], N[,Tmax-1, 2]*pmat[,Tmax-1, 2], N[,Tmax-1, 3]*pmat[,Tmax-1, 3]) #
   Fmales<-colSums(FAgeMat[2:3, ], na.rm=TRUE) #get numbers of males by age#
   Ffemales<-FAgeMat[1, ]  #get numbers of females by age#
    fdat=cbind(Ffemales, Fmales)#
    fdat2<-melt(fdat, varnames=c("Age", "Sex"))
fdat2
fdat
dat
devtools::install_github("ropensci/rfishbase@sac-null")#
 library(rfishbase)
damsels <- species_list(Class = "Pomocanthidae")#
angels <- species_list(Order = "Pomocentridae")
damsels
angels
library(rfishbase)
install.packages("rfishbase")
library(rfishbase)
damsels <- species_list(Class = "Pomocanthidae")#
angels <- species_list(Order = "Pomocentridae")
damsels
?species_list
damsels <- species_list(Family = "Pomocanthidae")#
angels <- species_list(Family = "Pomocentridae")
damsels
angels
damsels <- species_list(Family = "Pomacanthidae")#
angels <- species_list(Family = "Pomacentridae")
damsels
angels
?maturity
maturity(damsels)
angels <- species_list(Family = "Pomacanthidae")#
damsels <- species_list(Family = "Pomacentridae")
maturity(angels)
warnings()
maturity(damsels)
warnings()
length(damsels)
fecundity(damsels)
warnings()
fecundity(angels)
x<-maturity(angels)
x
x$sciname
x<-maturity(damsels)
x$sciname
x=c(1:3)
y=c(4:7)
x*y
y=c(4:6)
x*y
# matplot( ((1:Smax)), t( (MTcosts)), type = "l", lty=1, lwd=2,   xlab=" (Mass (kg))", ylab=" (Metabolic rate) in J/season", col=c(4, 3, "orange", 2))  ##this version of
(0.5:4)/10
seq(0.5, 4, by=.25)
seq(0.5, 4, by=.3)
seq(0.5, 4.1, by=.3)
seq(0.5, 4.1, by=.28)
seq(0.5, 4, by=.5)
seq(0.5, 4, by=.45)
seq(0.5, 4, by=.4)
seq(0.5, 4, by=.35)
length(seq(0.5, 4, by=.35)
)
length(seq(0.5, 4, by=.38)
)
####in Feb 8 results, kappa (environment richness) and costs of spawning (c1) vary and overall very steep for individuals < 50#
####in Feb 11 results, kappa (environemnt richness) and temperature vary and c0 = 0.1, c1 is 0.25, so spawning costs are VERY steep for small individuals#
### in Feb 13 results, kappa and temperature vary, but there are no spawning costs (c2 = 0.1, c1=0)#
### in Feb 19 results, kappa and temperature vary, but c0 is 0.05 (and c1 is 0.15), so spawning costs are severe for individuals < 80 cm - not that interersting#
####in Feb 20 the metabolic costs get a lot steeper in warm envieonments, but there are no CoR#
###in Feb 20.2 the maximum lifespan is much longer#
###Feb 21 maximum lifespan is the same as Feb 20.2, kappa inclueds 4; max state is greater (375); also rep limit is 2#
##March 11: same as feb 21 except variance in food is zero and max lifespan is shorter (16 years)#
setwd("~/Documents/model_output/")#
data_files <- list.files(pattern = "\\.csv$")#
#
repro_filenames <- data_files[((length(data_files)/3)+1):(2*(length(data_files)/3))]   #
state_filenames <- data_files[(2*(length(data_files)/3)+1):(3*(length(data_files)/3))]#
length_filenames <- data_files[1:(length(data_files)/3)]#
#
length_filenames <- unique(length_filenames)#
repro_filenames <- unique(repro_filenames)#
state_filenames <- unique(state_filenames)#
#
length_data <- lapply(length_filenames, read.csv)#
repro_data <- lapply(repro_filenames, read.csv)#
state_data <- lapply(state_filenames, read.csv)#
 quartz()#
  par(mfrow=c(3, 4))#
plot_length <- function(data, filenames) {#
	  #data[is.na(data)] <- 0#
     matplot(t(data[,-1]), type="l", main=c(substr(filenames, 9, 15), substr(filenames, 19, 24)), col="darkgray", lwd=1.75, lty=1,  ylab="Length (cm)", ylim=c(0, 400), xlim=c(0.5, 48), xlab= "Age (years)", xaxt="n")#
     axis(1, at = seq(0, 60, by=4), labels = (seq(1, 16, by=1)))#
     }#
 mapply(plot_length, length_data, length_filenames)
warnings()
sharkdata <- read.csv(""~/Desktop/SPL vert bins.csv)
sharkdata <- read.csv("~/Desktop/SPL vert bins.csv")
hist(sharkdata)
sharkdata
sharkdata[,3]<-seq(35, 305, by=10
)
sharkdata[1:25,3]<-seq(35, 305, by=10)
sharkdata[2:25,3]<-seq(35, 305, by=10)
sharkdata <- read.csv("~/Desktop/SPL vert bins.csv")
barplot(sharkdata$midpoint, sharkdata$count.SPL)
sharkdata
barplot(count.SPL~midpoint, data=sharkdata)
barplot(sharkdata$count.SPL~sharkdata$midpoint, data=sharkdata)
?barplot
barplot(sharkdata$count.SPL, width=1, names.arg=sharkdata$midpoint)
sharkdata[-28, ]
sharkdata[-29, ]
shark<-sharkdata[-29, ]
barplot(shark$count.SPL, width=1, names.arg=shark$midpoint)
barplot(shark$count.SPL, width=1, names.arg=shark$midpoint, ylim=c(0, 25))
barplot(shark$count.SPL, width=1, names.arg=shark$midpoint, ylim=c(0, 25), main="Number of samples in each size bin from the SEFSC Shark Bottom Longline Observer Program")
barplot(shark$count.SPL, width=1, names.arg=shark$midpoint, ylim=c(0, 25), main="Number of samples in each size bin from the SEFSC Shark Bottom Longline Observer Program", cex=0.25)
barplot(shark$count.SPL, width=1, names.arg=shark$midpoint, ylim=c(0, 25), main="Number of samples in each size bin ")
setwd("~/Documents/tuna_theory/seasonal/reprolimit.2/")#
data_files <- list.files(pattern = "\\.csv$")#
#
repro_filenames <- data_files[((length(data_files)/4)+1):(2*(length(data_files)/4))]   #
state_filenames <- data_files[(2*(length(data_files)/4)+1):(3*(length(data_files)/4))]#
length_filenames <- data_files[1:(length(data_files)/4)]#
surv_filenames <- data_files[(3*(length(data_files)/4)+1):(4*(length(data_files)/4))]#
#
length_filenames <- unique(length_filenames)#
repro_filenames <- unique(repro_filenames)#
state_filenames <- unique(state_filenames)#
surv_filenames <- unique(surv_filenames)#
#
length_data <- lapply(length_filenames, read.csv)#
repro_data <- lapply(repro_filenames, read.csv)#
state_data <- lapply(state_filenames, read.csv)#
surv_data <- lapply(surv_filenames, read.csv)#
 time=1:204#
  quartz()#
   par(mfrow=c(2,2))#
plot_length <- function(data, filenames) {#
     matplot(t(data[,-1]), type="l", main=substr(filenames, 9, 30), col="darkgray", lwd=1.75, lty=1,  ylab="Length (cm)", ylim=c(0, 400), xlim=c(0.5, 220), xlab= "Age (years)", xaxt="n")#
     axis(1, at = seq(0, 220, by=12), labels = (seq(1, 19, by=1)))#
     maxsize <- (min(which(as.numeric(data[1, -1]) == max(as.numeric(data[1, -1]))))) + 1 #
     age_m <- min(which(as.numeric(data[1, -1]) >= 0.5*as.numeric(data[1, maxsize])))/12 #
     legend("topleft", legend=paste0("Lmax is ", round(data[1, maxsize]), " cm"), bty="n")#
          }#
 mapply(plot_length, length_data, length_filenames)    #
  # plot_hist <- function(data, filenames) {#
    # hist(data[, 12], breaks=50, xlim=c(50, 350), main=substr(filenames, 13, 49))#
  # }#
  # mapply(plot_hist, length_data, length_filenames)#
 quartz()#
   par(mfrow=c(2,2))#
  plot_repro <- function(repro_data, repro_filenames) {#
	       matplot(t(repro_data[,-1]), type="l", main= substr(repro_filenames, 8, 23), col="darkgray", lwd=1.75, lty=1,   ylab="Reproduction (J)",   xlab= "Age (years)", xaxt="n", ylim=c(0, 5e+08), xlim=c(0.5, 220))#
     axis(1, at = seq(0, 220, by=12), labels = (seq(1, 19, by=1)))#
     maxsize <- (min(which(as.numeric(repro_data[1, -1]) == max(as.numeric(repro_data[1, -1]), na.rm=TRUE)))) + 1 #
     print(maxsize)#
      age_m <- min(which(as.numeric(repro_data[1, -1]) >= 0.5*as.numeric(repro_data[1, maxsize])), na.rm=TRUE)/12 #
#
      legend("topright", legend=paste0("A_50 is ", round(age_m+1, 2), " years"), bty="n")#
   # print(repro_data[,-1]) #
     }#
#
mapply(plot_repro, repro_data, repro_filenames)#
#
  quartz()#
   par(mfrow=c(2,2))#
  plot_state <- function(state_data, state_filenames) {#
     matplot(t(state_data[,-1]), type="l", main= substr(state_filenames, 8, 23), col="darkgray", lwd=1.75, lty=1,   ylab="State (J)",   xlab= "Age (years)", xaxt="n", ylim=c(0, 6e+08), xlim=c(0.5, 220))#
     axis(1, at = seq(0, 220, by=12), labels = (seq(1, 19, by=1)))#
     }#
#
mapply(plot_state, state_data, state_filenames)#
#
quartz()#
   par(mfrow=c(2,2)) #
#
fec.exp <-function(ldata1, rdata2, filenames) {#
 	data1 <- as.numeric(ldata1[1,-1])#
 	data2 <- as.numeric(rdata2[1, -1])#
 	  	matplot(t(log(data1[-216])), t(log(data2[-216])), type="p", col="darkgray", pch=20,   main= substr(filenames, 9, 30),  xlab="ln(Length) ", ylim=c(0, 25), xlim=c(0, 7), ylab="ln(Reproduction) ")#
 	print((data1))#
 	print((data2))#
 	  max.rep.age = as.numeric(which.max(data2))#
 	  print(max.rep.age)#
 	  min.rep.age = as.numeric(which.min(data2[-216])) #
 	  print(min.rep.age)#
 	   m1<-lm(log(data2[c(min.rep.age:max.rep.age)])~log(data1[c(min.rep.age:max.rep.age)]))#
 	   b= (log(data2[max.rep.age])-log(data2[min.rep.age])) / (log(data1[max.rep.age]) - log(data1[min.rep.age]) )#
 	    a=0#
 	  if(is.na(coef(m1)[2])==FALSE) abline(m1)#
 	 #abline(a, b)#
 	 #print(coef(m1)[2])#
 	#val<-paste0("Env is ", substr(filenames, 9, 23),", Slope is ", round(as.numeric(coef(m1)[2]), 3))#
    legend("topleft",   legend=paste0("slope is ", round(b, 3), " vs ", round(as.numeric(coef(m1)[2]), 3))) #round(as.numeric(coef(m1)[2]), 3)), bty="n")#
 	   	} #
#
mapply(fec.exp, length_data, repro_data, length_filenames)#
quartz()#
  par(mfrow=c(2,2))#
 surv <- function(data, filenames) {#
 	matplot(data[,-1], type="l", main= substr(filenames, 6, 25), col="darkgray", xlab="Age (years)", ylab="Survival", xaxt="n", ylim=c(0, 1.1), xlim=c(0.5, 220))#
     axis(1, at = seq(0, 220, by=12), labels = (seq(1, 19, by=1)))#
 }#
 	mapply(surv, surv_data, surv_filenames)#
    lnsurv <- function(data, filenames) {#
 	data1<-as.numeric(data[,2])#
 	print(dim(data1))#
 	matplot(log(data1[-1]), type="l", main= substr(filenames, 7, 30), col="darkgray", xlab="Age (years)", ylab="ln(Survival)", xaxt="n",  ylim=c(-10, 0), xlim=c(0.5, 220))#
     axis(1, at = seq(0, 220, by=12), labels = (seq(1, 19, by=1))) #
   #m2<-lm(log(data1[-1])~time[-204])#
   #abline(m2)#
   #print(paste0("Env is ", substr(surv_filenames, 8, 18))),", Slope is ", round(as.numeric(coef(m2)[2]), 3)))#
   #legend("bottomleft",   legend=paste0("slope is ",round(as.numeric(coef(m2)[2]), 3)), bty="n")#
 }#
 	#mapply(lnsurv, surv_data, surv_filenames)
setwd("~/Documents/tuna_theory/seasonal/")#
data_files <- list.files(pattern = "\\.csv$")#
#
repro_filenames <- data_files[((length(data_files)/4)+1):(2*(length(data_files)/4))]   #
state_filenames <- data_files[(2*(length(data_files)/4)+1):(3*(length(data_files)/4))]#
length_filenames <- data_files[1:(length(data_files)/4)]#
surv_filenames <- data_files[(3*(length(data_files)/4)+1):(4*(length(data_files)/4))]#
#
length_filenames <- unique(length_filenames)#
repro_filenames <- unique(repro_filenames)#
state_filenames <- unique(state_filenames)#
surv_filenames <- unique(surv_filenames)#
#
length_data <- lapply(length_filenames, read.csv)#
repro_data <- lapply(repro_filenames, read.csv)#
state_data <- lapply(state_filenames, read.csv)#
surv_data <- lapply(surv_filenames, read.csv)#
 time=1:204#
  quartz()#
   par(mfrow=c(2,2))#
plot_length <- function(data, filenames) {#
     matplot(t(data[,-1]), type="l", main=substr(filenames, 9, 30), col="darkgray", lwd=1.75, lty=1,  ylab="Length (cm)", ylim=c(0, 400), xlim=c(0.5, 220), xlab= "Age (years)", xaxt="n")#
     axis(1, at = seq(0, 220, by=12), labels = (seq(1, 19, by=1)))#
     maxsize <- (min(which(as.numeric(data[1, -1]) == max(as.numeric(data[1, -1]))))) + 1 #
     age_m <- min(which(as.numeric(data[1, -1]) >= 0.5*as.numeric(data[1, maxsize])))/12 #
     legend("topleft", legend=paste0("Lmax is ", round(data[1, maxsize]), " cm"), bty="n")#
          }#
 mapply(plot_length, length_data, length_filenames)    #
  # plot_hist <- function(data, filenames) {#
    # hist(data[, 12], breaks=50, xlim=c(50, 350), main=substr(filenames, 13, 49))#
  # }#
  # mapply(plot_hist, length_data, length_filenames)#
 quartz()#
   par(mfrow=c(2,2))#
  plot_repro <- function(repro_data, repro_filenames) {#
	       matplot(t(repro_data[,-1]), type="l", main= substr(repro_filenames, 8, 23), col="darkgray", lwd=1.75, lty=1,   ylab="Reproduction (J)",   xlab= "Age (years)", xaxt="n", ylim=c(0, 5e+08), xlim=c(0.5, 220))#
     axis(1, at = seq(0, 220, by=12), labels = (seq(1, 19, by=1)))#
     maxsize <- (min(which(as.numeric(repro_data[1, -1]) == max(as.numeric(repro_data[1, -1]), na.rm=TRUE)))) + 1 #
     print(maxsize)#
      age_m <- min(which(as.numeric(repro_data[1, -1]) >= 0.5*as.numeric(repro_data[1, maxsize])), na.rm=TRUE)/12 #
#
      legend("topright", legend=paste0("A_50 is ", round(age_m+1, 2), " years"), bty="n")#
   # print(repro_data[,-1]) #
     }#
#
mapply(plot_repro, repro_data, repro_filenames)#
#
  quartz()#
   par(mfrow=c(2,2))#
  plot_state <- function(state_data, state_filenames) {#
     matplot(t(state_data[,-1]), type="l", main= substr(state_filenames, 8, 23), col="darkgray", lwd=1.75, lty=1,   ylab="State (J)",   xlab= "Age (years)", xaxt="n", ylim=c(0, 6e+08), xlim=c(0.5, 220))#
     axis(1, at = seq(0, 220, by=12), labels = (seq(1, 19, by=1)))#
     }#
#
mapply(plot_state, state_data, state_filenames)#
#
quartz()#
   par(mfrow=c(2,2)) #
#
fec.exp <-function(ldata1, rdata2, filenames) {#
 	data1 <- as.numeric(ldata1[1,-1])#
 	data2 <- as.numeric(rdata2[1, -1])#
 	  	matplot(t(log(data1[-216])), t(log(data2[-216])), type="p", col="darkgray", pch=20,   main= substr(filenames, 9, 30),  xlab="ln(Length) ", ylim=c(0, 25), xlim=c(0, 7), ylab="ln(Reproduction) ")#
 	print((data1))#
 	print((data2))#
 	  max.rep.age = as.numeric(which.max(data2))#
 	  print(max.rep.age)#
 	  min.rep.age = as.numeric(which.min(data2[-216])) #
 	  print(min.rep.age)#
 	   m1<-lm(log(data2[c(min.rep.age:max.rep.age)])~log(data1[c(min.rep.age:max.rep.age)]))#
 	   b= (log(data2[max.rep.age])-log(data2[min.rep.age])) / (log(data1[max.rep.age]) - log(data1[min.rep.age]) )#
 	    a=0#
 	  if(is.na(coef(m1)[2])==FALSE) abline(m1)#
 	 #abline(a, b)#
 	 #print(coef(m1)[2])#
 	#val<-paste0("Env is ", substr(filenames, 9, 23),", Slope is ", round(as.numeric(coef(m1)[2]), 3))#
    legend("topleft",   legend=paste0("slope is ", round(b, 3), " vs ", round(as.numeric(coef(m1)[2]), 3))) #round(as.numeric(coef(m1)[2]), 3)), bty="n")#
 	   	} #
#
mapply(fec.exp, length_data, repro_data, length_filenames)#
quartz()#
  par(mfrow=c(2,2))#
 surv <- function(data, filenames) {#
 	matplot(data[,-1], type="l", main= substr(filenames, 6, 25), col="darkgray", xlab="Age (years)", ylab="Survival", xaxt="n", ylim=c(0, 1.1), xlim=c(0.5, 220))#
     axis(1, at = seq(0, 220, by=12), labels = (seq(1, 19, by=1)))#
 }#
 	mapply(surv, surv_data, surv_filenames)#
    lnsurv <- function(data, filenames) {#
 	data1<-as.numeric(data[,2])#
 	print(dim(data1))#
 	matplot(log(data1[-1]), type="l", main= substr(filenames, 7, 30), col="darkgray", xlab="Age (years)", ylab="ln(Survival)", xaxt="n",  ylim=c(-10, 0), xlim=c(0.5, 220))#
     axis(1, at = seq(0, 220, by=12), labels = (seq(1, 19, by=1))) #
   #m2<-lm(log(data1[-1])~time[-204])#
   #abline(m2)#
   #print(paste0("Env is ", substr(surv_filenames, 8, 18))),", Slope is ", round(as.numeric(coef(m2)[2]), 3)))#
   #legend("bottomleft",   legend=paste0("slope is ",round(as.numeric(coef(m2)[2]), 3)), bty="n")#
 }#
 	#mapply(lnsurv, surv_data, surv_filenames)
